==BaseHTTPServer 模块==


这是一个建立在 ``SocketServer`` 框架上的基本框架, 用于 HTTP 服务器.

[Example 7-36 #eg-7-36] 在每次重新载入页面时会生成一条随机信息. 
``path`` 变量包含当前 URL , 你可以使用它为不同的 URL 生成不同的内容
(访问除根目录的其他任何 path 该脚本都会返回一个错误页面).

====Example 7-36. 使用 BaseHTTPServer 模块====[eg-7-36]

```
File: basehttpserver-example-1.py

import BaseHTTPServer
import cgi, random, sys

MESSAGES = [
    "That's as maybe, it's still a frog.",
    "Albatross! Albatross! Albatross!",
    "It's Wolfgang Amadeus Mozart.",
    "A pink form from Reading.",
    "Hello people, and welcome to 'It's a Tree.'"
    "I simply stare at the brick and it goes to sleep.",
]

class Handler(BaseHTTPServer.BaseHTTPRequestHandler):

    def do_GET(self):
        if self.path != "/":
            self.send_error(404, "File not found")
            return
        self.send_response(200)
        self.send_header("Content-type", "text/html")
        self.end_headers()
        try:
            # redirect stdout to client
            stdout = sys.stdout
            sys.stdout = self.wfile
            self.makepage()
        finally:
            sys.stdout = stdout # restore
        
    def makepage(self):
        # generate a random message
        tagline = random.choice(MESSAGES)
        print "<html>"
        print "<body>"
        print "<p>Today's quote: "
        print "<i>%s</i>" % cgi.escape(tagline)
        print "</body>"
        print "</html>"

PORT = 8000

httpd = BaseHTTPServer.HTTPServer(("", PORT), Handler)
print "serving at port", PORT
httpd.serve_forever()
```

更有扩展性的 HTTP 框架请参阅 ``SimpleHTTPServer`` 和 ``CGIHTTPServer`` 模块.
