==Bastion 模块==


Feather 注: 版本 2.3 时取消了改模块的支持, 具体原因请参阅 :
http://www.amk.ca/python/howto/rexec/ 和 
http://mail.python.org/pipermail/python-dev/2003-January/031848.html

``Bastion`` 模块, 允许你控制给定对象如何使用, 如 [Example 14-7 #eg-14-7] 所示. 
你可以通过它把对象从未限制部分传递到限制部分.

默认情况下, 所有的实例变量都是隐藏的, 所有的方法以下划线开头.

====Example 14-7. 使用 Bastion 模块====[eg-14-7]

```
File: bastion-example-1.py

import Bastion

class Sample:
    value = 0

    def _set(self, value):
        self.value = value

    def setvalue(self, value):
        if 10 < value <= 20:
            self._set(value)
        else:
            raise ValueError, "illegal value"

    def getvalue(self):
        return self.value

#
# try it

s = Sample()
s._set(100) # cheat
print s.getvalue()

s = Bastion.Bastion(Sample())
s._set(100) # attempt to cheat
print s.getvalue()

*B*100
Traceback (innermost last):
...
AttributeError: _set*b*
```

你可以控制发布哪个函数. 在 [Example 14- #eg-14-8] 中, 内部方法可以从外部调用, 
但 getvalue 不再起作用.

====Example 14-8. 使用 Bastion 模块处理非标准过滤器====[eg-14-8]

```
File: bastion-example-2.py

import Bastion

class Sample:
    value = 0

    def _set(self, value):
        self.value = value

    def setvalue(self, value):
        if 10 < value <= 20:
            self._set(value)
        else:
            raise ValueError, "illegal value"

    def getvalue(self):
        return self.value

#
# try it

def is_public(name):
    return name[:3] != "get"

s = Bastion.Bastion(Sample(), is_public)
s._set(100) # this works
print s.getvalue() # but not this

*B*100
Traceback (innermost last):
...
AttributeError: getvalue*b*
```