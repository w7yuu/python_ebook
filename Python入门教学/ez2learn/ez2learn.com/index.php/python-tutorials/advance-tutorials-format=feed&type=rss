<?xml version="1.0" encoding="utf-8"?>
<!-- generator="Joomla! 1.5 - Open Source Content Management" -->
<rss version="2.0">
	<channel>
		<title>Python進階教學</title>
		<description>Victor的 易記學 程式設計教學，包含Python、C/C++語言、TurboGears等教學，以及以承接Python為主的程式設計外包</description>
		<link>http://ez2learn.com/index.php/python-tutorials/advance-tutorials</link>
		<lastBuildDate>Thu, 11 Feb 2010 14:07:39 +0000</lastBuildDate>
		<generator>Joomla! 1.5 - Open Source Content Management</generator>
		<language>zh-tw</language>
		<item>
			<title>使用C++擴充Python</title>
			<link>http://ez2learn.com/index.php/python-tutorials/advance-tutorials/174-cpython</link>
			<description><![CDATA[<h1 class="documentFirstHeading"><span id="parent-fieldname-title"> 使用C++擴充Python </span></h1>
<p class="documentDescription"><span id="parent-fieldname-description"> 使用C++的Boost.Python括充一個Python的模組教學 </span></p>
<div id="parent-fieldname-text">
<h2>為什麼要擴充Python?</h2>
<p>時常有人問Python到底能做什麼，我的回答是，看你要拿Python來做什麼，因為Python可以用C語言擴充，這表示C語言能做到的事都可以由 Python，現有的函式庫如果辦不到，大不了你自己寫一個，這不僅僅是只有這樣的好處而已，很多時候我們希望能有Python的彈性、可讀性等各種好 處，但又有C語言的高效率，就可以將整個程式中較吃重的工作用C語言寫成module供Python使用，同時兼俱彈性與效率</p>
<h2>使用的工具</h2>
<p>我們要使用的是C++的Boost函式庫裡的Python模組，它是用來包裝C++供Python使用的函式庫，不使用這個函式庫的話，你必須使用Python提供的C語言API自行包裝，在這裡我們示範如何使用Boost.Python來包裝成模組讓Python使用</p>
<p>在開始之前，你必須確定你有安裝Boost的函式庫，如果沒有的話，請到<a class="external-link" href="http://www.boost.org/">Boost的官方網站</a>自行下載並編譯或安裝，如果不知道怎麼編譯可以考慮下載<a class="external-link" href="http://www.boostpro.com/products/free">事先編譯完成的版本</a></p>
<h2>第一個簡單的例子</h2>
我們參考Boost官方網站的<a class="external-link" href="http://www.boost.org/doc/libs/1_36_0/libs/python/doc/tutorial/doc/html/index.html"> 文件</a>，一個簡單的模組
<p>hello.cpp</p>
<pre name="code" class="c:nogutter:nocontrols">char const* greet()
{
   return "hello, world";
}

#include 

BOOST_PYTHON_MODULE(hello_ext)
{
    using namespace boost::python;
    def("greet", greet);
}
</pre>
<p>有了Boost.Python的幫忙，用C++擴充Python會是一件超級簡單的事，相較於這個例子，編譯看起來就麻煩得多了</p>
<h2>進行編譯</h2>
Boost.Python的模組通常都使用bjam來編譯，什麼是bjam呢? 它是boost的一套編譯系統，你可以下載原始碼自行編譯，同樣的如果你不知道如何自行編譯的話，可以<a class="external-link" href="http://sourceforge.net/project/showfiles.php?group_id=7586&package_id=72941"> 下載事先編譯的版本</a>，在這裡我們通常選ntx86，如果你用的是PC的話，然後確定你的bjam.exe的目錄在PATH的環境變數中，或著你可以直接把bjam.exe放在my_module.cpp的同一個資料夾下
<p> </p>
<p>接著我們必須建立bjam的編譯檔案，你可以在boost的目錄"\libs\python\example\quickstart"下面找到它們，複製到你的模組同樣的資料夾下並修改，分別是</p>
<p>boost-build.jam</p>
<pre name="code" class="python:nogutter:nocontrols"># Copyright David Abrahams 2006. Distributed under the Boost
# Software License, Version 1.0. (See accompanying
# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

# Edit this path to point at the tools/build/v2 subdirectory of your
# Boost installation.  Absolute paths work, too.
boost-build ../../../../tools/build/v2 ;
</pre>
<p>Jamroot</p>
<pre name="code" class="python:nogutter:nocontrols"># Copyright David Abrahams 2006. Distributed under the Boost
# Software License, Version 1.0. (See accompanying
# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

# Specify the path to the Boost project.  If you move this project,
# adjust the path to refer to the Boost root directory.
use-project boost 
  : ../../../.. ;

# Set up the project-wide requirements that everything uses the
# boost_python library defined in the project whose global ID is
# /boost/python.
project boost-python-quickstart
  : requirements &lt;library&gt;/boost/python//boost_python 
    ;

# Make the definition of the python-extension rule available
import python ;

# Declare a Python extension called hello.
python-extension extending : extending.cpp ;

# Declare an executable called embedding that embeds Python
exe embedding : embedding.cpp /python//python ;

import testing ;

# Declare a test of the extension module
testing.make-test run-pyd : extending test_extending.py : : test_ext ;

# Declare a test of the embedding application
testing.run embedding 
  :              # any ordinary arguments
  : script.py    # any arguments that should be treated as relative paths
  :              # requirements
  : test_embed ; # name of test

# Create a "test" target that runs all the tests
alias test : test_ext test_embed ;

# make sure the tests don't run by default
explicit test_ext test_embed test ;
;

</pre>
<p>兩個檔案，但是因為這些檔案的內容並不能直接使用，需要做一點修改，以下是我們修改的版本</p>
<p>boost-build.jam</p>
<pre name="code" class="python:nogutter:nocontrols"># Copyright David Abrahams 2006. Distributed under the Boost
# Software License, Version 1.0. (See accompanying
# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

# Edit this path to point at the tools/build/v2 subdirectory of your
# Boost installation.  Absolute paths work, too.
boost-build C:/boost/boost_1_35_0/tools/build/v2 ;

</pre>
<p>這個檔案我們修改了boost-build，設為絕對的路徑，你應該修改它成你安裝boost的位置</p>
<p>Jamroot</p>
<pre name="code" class="python:nogutter:nocontrols"># Copyright David Abrahams 2006. Distributed under the Boost
# Software License, Version 1.0. (See accompanying
# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

# Specify the path to the Boost project.  If you move this project,
# adjust the path to refer to the Boost root directory.
use-project boost 
  : I:/boost/boost_1_36_0 ;

# Set up the project-wide requirements that everything uses the
# boost_python library defined in the project whose global ID is
# /boost/python.
project boost-python-quickstart
  : requirements &lt;library&gt;/boost/python//boost_python 
  &lt;threading&gt;multi
;

# Make the definition of the python-extension rule available
import python ;

# Declare a Python extension called hello.
python-extension hello_ext : hello.cpp


</pre>
<p>我們修改了use-project boost的專案目錄位置，改成你放置my_module.cpp的地方，然後還有python-extension改成我們的模組名稱和.cpp檔位 置，除此之外我們還刪除了建置測試用的部份，以上兩個檔案都應放在和my_module.cpp同一個目錄下，準備完成就可以開始進行編譯，進入cmd， 切換目錄，執行bjam</p>
<pre name="code" class="python:nogutter:nocontrols">cd c:\python_tutorial bjam
</pre>
<p>如果沒有錯誤，應該該會產生一個hello_ext.pyd的檔案，這時只要將它copy到Python的library目錄，或是你Python模組執行的目錄，除此之外還有boost相對應的python的DLL檔，就可以直接使用</p>
<pre name="code" class="python:nogutter:nocontrols">import hello_ext
print hello_ext.greet()
</pre>
<p>像這樣就會印出hello, world的字樣，如果你不想使用shared的方式link到Boost.Python以及不想產生debug資訊，你可以選擇使用下列指令</p>
<pre name="code" class="python:nogutter:nocontrols">bjam release link=static</pre>
<p>更多的參數指令可以在這裡被找到</p>
<p><a class="external-link" href="http://www.boost.org/doc/tools/build/doc/html/bbv2/advanced/invocation.html">http://www.boost.org/doc/tools/build/doc/html/bbv2/advanced/invocation.html</a></p>
<p>如果你有需要增加include的目錄或是要link的lib，可以將project 的 requirements部份改寫</p>
<pre>project boost-python-quickstart
  : requirements &lt;library&gt;/boost/python//boost_python
  &lt;threading&gt;multi
  &lt;library&gt;test.lib
  &lt;include&gt;header/util
;
</pre>
<p>詳細參數請參考</p>
<p><a class="external-link" href="http://www.boost.org/doc/tools/build/doc/html/bbv2/advanced/builtins/features.html">http://www.boost.org/doc/tools/build/doc/html/bbv2/advanced/builtins/features.html</a></p>
<h2>常見錯誤<br /></h2>
<p>如果你在import時遇到下列錯誤</p>
<pre name="code" class="python:nogutter:nocontrols">ImportError: dynamic module does not define init function (inithello)</pre>
<p>那通常是你在BOOST_PYTHON_MODULE定義的名稱和在Jamroot定義的不同所引起的</p>
</div><more_text></more_text>]]></description>
			<category> Python進階教學</category>
			<pubDate>Wed, 11 Feb 2009 13:09:37 +0000</pubDate>
		</item>
		<item>
			<title>如何使用easy_install輕鬆安裝第三方模組</title>
			<link>http://ez2learn.com/index.php/python-tutorials/advance-tutorials/175-easyinstall</link>
			<description><![CDATA[<h2>安裝函式庫的麻煩</h2>
<p>很多時候我們需要安裝函式庫，最常見的方法就是找到該函式庫的官方網站，然後找到載點、合適的版本，接著下載並安裝，這過程相當煩人，每個網站的設計都不太一樣，而挑選合適的版本也是個問題，是吃力不討好的工作</p>
<h2>easy_install</h2>
<p>為了輕鬆下載並安裝第三方函式庫，Python有一個好用的工具指令叫做easy_install，可以讓你很輕鬆地執行一行指令，就上網到Python package的index中找到該套件選擇合適的版本，並且下載後安裝，節省了我們寶貴的時間，以下介紹如何安裝和使用easy_install</p>
<h2>下載並安裝</h2>
<p>easy_install這個工具可以在這裡被找到</p>
<p><a class="external-link" href="http://pypi.python.org/pypi/setuptools">http://pypi.python.org/pypi/setuptools</a></p>
<p>拉到網頁靠近底部，找到一個適合的版本，例如假設你現在用的是Python 2.5，就下載</p>
<blockquote>setuptools-0.6c9.win32-py2.5.exe <br /></blockquote>
<p>這個檔案後執行安裝</p>
<h2>如何使用</h2>
<p>使用easy_install下載套件比吃飯還簡單，只要在easy_install指令後面加上你想要的套件名稱，就會自動執行整個工作，下面是幾個例子</p>
<pre name="code" class="python:nogutter:nocontrols">easy_install sqlalchemy
easy_install lxml
easy_install pylab
</pre>
<p>當然，easy_install還有更多功能和參數，詳細說明，可以執行下面指令來查看，在此不多做贅述</p>
<pre name="code" class="python:nogutter:nocontrols">easy_install --help
</pre>]]></description>
			<category> Python進階教學</category>
			<pubDate>Wed, 11 Feb 2009 13:09:38 +0000</pubDate>
		</item>
		<item>
			<title>如何使用py2exe將Python程式打包成.exe執行檔的教學</title>
			<link>http://ez2learn.com/index.php/python-tutorials/advance-tutorials/176-py2exepythonexe</link>
			<description><![CDATA[<h2>依賴直譯器的煩人問題</h2>
<p>你是否有這樣的煩腦，用Python寫了一個很酷的程式，傳給你同學看卻因為他沒有裝Python直譯器，為了執行你這個小程式，他得安裝直譯器才能執行，更麻煩的還有第三方的模組要安裝，意願就大大的降低，同樣的，面對你的客戶，你總不能要求你的客戶安裝Python直譯器，然後用easy_install下載需要的模組，那會是很麻煩的事情，很多時候，我們希望Python像.exe檔一樣只要是Windows就可以執行，該如何解決?</p>
<h2><a class="external-link" href="http://www.py2exe.org/">py2exe</a></h2>
<p>所幸我們有現成的工具可以使用，叫做py2exe，它會將Python程式所需要的東西收集，並且打包成可以不用安裝直譯器就可以執行的.exe程式，以下我們就教你一步一步將Python程式打包成.exe檔</p>
<h3>安裝py2exe</h3>
<p>如果你有安裝easy_install，你可以直接在cmd下這樣的指令，就可以輕鬆地安裝py2exe，關於easy_install的教學可以參考<a title="如何使用easy_install輕鬆安裝第三方模組" class="internal-link" href="http://ez2learn.com//python-tutorial/advance-tutorial/how-to-use-easy-install">這篇</a></p>
<pre name="code" class="python:nogutter:nocontrols">easy_install py2exe
</pre>
<p>如果沒有的話，你可以直接從它的<a class="external-link" href="http://www.py2exe.org/">官方網站</a>下載並且安裝</p>
<h3>開始打包</h3>
<p>首先，你需要建立一個這樣的python檔案，放在你想打包的python程式同一個目錄下</p>
<pre name="code" class="python:nogutter:nocontrols">from distutils.core import setup
import py2exe

setup(console=['python_file.py'])</pre>
<p>其中的python_file.py請改成你要當做執行檔的python檔案名稱，例如我想打包test.py成為.exe檔，就將上面程式裡的python_file.py改成test.py，當完成之後，檔名存成setup.py，放在你python程式的同一個目錄下</p>
<p>接著，開啟 開始 -&gt; 執行 -&gt; cmd，也就是所謂的命令提示字元，然後切換到你專案所在的目錄，然後執行如下面指令</p>
<pre name="code" class="python:nogutter:nocontrols">cd /d G:\Programming\Python\dstreamer\src\src\dist
python setup.py install
</pre>
<p>完成之後，再執行以下指令</p>
<pre name="code" class="python:nogutter:nocontrols">python setup.py py2exe</pre>
<p>此時py2exe就會開始幫你收集你程式會用到的模組，並且打包好，如果沒有問題，執行完同一個目錄下應該會多出build和dist兩個資料夾，dist裡會有一個和你python檔案名稱一樣的.exe檔，那就是封裝後的.exe執行檔，而該目錄下的所有其它檔案，就是該執行檔所需要的模組和檔案所封裝成的檔案，因此如果想要將程式移到沒有安裝Python直譯器的環境下執行，只要將dist下的所有檔案複製過去然後再執行.exe檔就可以了</p>
<h2>常見錯誤</h2>
<p>有一個很常見的錯誤是，我成功地產生了.exe檔，也可以執行，但一執行就會產生找不到模組的錯誤，如下面所示範</p>
<pre name="code" class="python:nogutter:nocontrols">Traceback (most recent call last):
  File "demo3.py", line 7, in &lt;module&gt;
  File "base.pyc", line 5, in &lt;module&gt;
  File "twisted\web\client.pyc", line 16, in &lt;module&gt;
  File "twisted\web\error.pyc", line 9, in &lt;module&gt;
ImportError: No module named resource
</pre>
<p>關於這點，是因為有些模組py2exe沒有辦法自動幫你找出來，因此你需要自己下參數要它加入那些模組，解決方法請參考我寫的，<a class="external-link" href="http://blog.ez2learn.com/2008/10/04/py2exe-no-module-problem/">py2exe 找不到Module的問題</a></p>
<p> </p>]]></description>
			<category> Python進階教學</category>
			<pubDate>Wed, 11 Feb 2009 13:09:39 +0000</pubDate>
		</item>
	</channel>
</rss>
